{"version":3,"sources":["components/LoadingIndicator/index.js","components/LoadingIndicator/loading-indicator.js","services/weather-api.js","components/WeatherDisplay/index.js","components/WeatherDisplay/weather-display.js","components/App/cities.js","components/App/index.js","components/App/app.js","index.js"],"names":["LoadingIndicator","className","WeatherApi","lang","this","cityId","URL","fetch","then","res","json","WeatherDisplay","state","weatherData","api","city","props","getByCity","id","setState","weather","iconUrl","icon","todayTemp","main","temp_min","temp_max","data-city","name","coord","lat","lon","Math","round","temp","description","src","alt","humidity","floor","pressure","wind","speed","Component","CITIES","getCities","App","cities","activePlace","Navbar","Brand","Container","Row","Col","md","sm","Nav","variant","activeKey","onSelect","index","map","place","Item","key","Link","eventKey","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90279114.chunk.js","sourcesContent":["import LoadingIndicator from \"./loading-indicator\";\nexport default LoadingIndicator;","import React from \"react\";\n\nimport './loading-indicator.css';\n\nconst LoadingIndicator = () => {\n\treturn (\n\t\t<div className=\"loading-indicator\">\n\t\t\t<div className=\"lds-roller\">\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t\t<div> </div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default LoadingIndicator;","const appId = 'b1b35bba8b434a28a0be2a3e1071ae5b',\n\tapiUrl = 'http://api.openweathermap.org/data/2.5/weather';\n\nexport default class WeatherApi{\n\tconstructor(lang = 'ru'){\n\t\tthis.lang = lang;\n\t}\n\n\tgetByCity(cityId){\n\t\tconst URL = `${apiUrl}?id=${cityId}&appid=${appId}&units=metric&lang=${this.lang}`;\n\t\treturn fetch(URL)\n\t\t\t.then(res => res.json());\n\t}\n}","import WeatherDisplay from \"./weather-display\";\nexport default WeatherDisplay;","import React, {Component} from \"react\";\n\nimport './weather-display.css';\nimport LoadingIndicator from \"../LoadingIndicator/\";\n\nimport WeatherApi from '../../services/weather-api';\n\nexport default class WeatherDisplay extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tweatherData: null\n\t\t};\n\t\tthis.api = new WeatherApi();\n\t}\n\n\tcomponentDidMount() {\n\t\tconst {city} = this.props;\n\n\t\tthis.api.getByCity(city.id)\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({weatherData: json});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconst {weatherData} = this.state;\n\t\tif (!weatherData) return <LoadingIndicator/>;\n\n\t\tconst weather = weatherData.weather[0];\n\t\tconst iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n\t\tconst todayTemp = weatherData.main.temp_min === weatherData.main.temp_max\n\t\t\t? weatherData.main.temp_min\n\t\t\t: weatherData.main.temp_min + ' - ' + weatherData.main.temp_max;\n\t\treturn (\n\t\t\t<div className=\"card\"\n\t\t\t\t data-city={`${weatherData.name} ${weatherData.coord.lat}°, ${weatherData.coord.lon}°`}>\n\t\t\t\t<h1 className=\"card-header\">\n\t\t\t\t\t{Math.round(weatherData.main.temp)}°, {weather.description}\n\t\t\t\t\t<img src={iconUrl} alt={weatherData.description}/>\n\t\t\t\t</h1>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<p>Сегодня: <span className=\"text-danger\">{todayTemp}°</span></p>\n\t\t\t\t\t<p>Влажность воздуха: {weatherData.main.humidity}%</p>\n\t\t\t\t\t<p>Атмосферное давление: {Math.floor(weatherData.main.pressure * 100 / 133.3224)} мм рт.ст.</p>\n\t\t\t\t\t<p>Скорость ветра: {weatherData.wind.speed} м/с</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n","const CITIES = [\n\t{ \"name\": \"Москва\", \"id\": \"524901\" },\n\t{ \"name\": \"Санкт-Петербург\", \"id\": \"498817\" },\n\t{ \"name\": \"Казань\", \"id\": \"551487\" },\n\t{ \"name\": \"Сочи\", \"id\": \"491422\" },\n\t{ \"name\": \"Калининград\", \"id\": \"554234\" },\n\t{ \"name\": \"Новосибирск\", \"id\": \"1496747\" },\n\t{ \"name\": \"Владивосток\", \"id\": \"2013348\" }\n];\n\nconst getCities = () => CITIES;\n\nexport default getCities;","import App from \"./app\";\nexport default App;","import React, { Component } from \"react\";\n\nimport \"./app.css\";\nimport \"bootswatch/dist/minty/bootstrap.css\";\n\nimport { Navbar, Nav, Container, Row, Col } from \"react-bootstrap\";\n\nimport WeatherDisplay from '../WeatherDisplay';\n\nimport getCities from './cities.js';\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cities: null,\n      activePlace: 0\n    };\n  }\n\n  componentDidMount(){\n\t  this.setState({\n\t\t  cities: getCities()\n\t  });\n  }\n\n  render() {\n\tconst {cities, activePlace} = this.state;\n\tif(!cities) return <LoadingIndicator/>;\n\n    return (\n      <div>\n      <Navbar>\n          <Navbar.Brand>\n            Погода\n          </Navbar.Brand>\n      </Navbar>\n        <Container>\n          <Row>\n            <Col md={4} sm={4}>\n              <h3>Город</h3>\n              <Nav\n                variant=\"pills flex-column\"\n                activeKey={activePlace}\n                onSelect={index => {\n                  this.setState({ activePlace: index });\n                }}\n              >\n                {cities.map((place, index) => (\n                  <Nav.Item key={index}>\n                    <Nav.Link eventKey={index}>{place.name}</Nav.Link>\n                  </Nav.Item>\n                ))}\n              </Nav>\n            </Col>\n            <Col md={8} sm={8}>\n              <WeatherDisplay key={activePlace} city={cities[activePlace]} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}